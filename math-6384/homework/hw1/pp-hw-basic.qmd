---
title: "Point Process Homework (Basics)"
author: Brady Lamson
date: 8/31/2025
output: html
self-contained: true
---

```{r, message=FALSE, results=FALSE, warning=FALSE, echo=FALSE}
packages <- c("spatstat", "pbapply", "smacpod")

for (pkg in packages) {
  if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
    install.packages(pkg, repos = "https://cran.rstudio.com/")
    library(pkg, character.only = TRUE)
  }
}
```


Instructions:  Answer the following questions and write your answers in a word processor.  Mathematical symbols should be written using the equation editor.  Appropriate graphics should be included.  The document may also be created in LaTeX, though this is NOT encouraged.

# Problem 1

What are the two components needed to define a spatial point process?

1. Spatial domain of interest
2. Observed event locations

# Problem 2 

What are the main components that define a homogeneous Poisson point process? 

Shamelessly stealing from the slides and the book here.

> 1. The number of events ocurring within a finite region $A$ is a RV following a Poisson distribution with mean $\lambda |A|$ for some positive constant $\lambda$ and $|A|$ denoting the area of $A$.
2. Given the total number of events $N$ occurring within an area $A$, the locations of the $N$ events represent an independent random sample of $N$ locations, where each point is equally likely to be chosen as an event. 

# Problem 3

What is the main difference between a homogeneous and heterogeneous Poisson point process?

The intensity rate $\lambda$ is constant across the entire study area in a homogeneous process. This is not the case in a heterogeneous poisson process. A heterogeneous poisson process could have some areas with far higher or lower intensities than others. 

# Problem 4

Describe the differences between a regular, clustered, and homogeneous (CSR) Poisson point process?

- **Regular:** Points are evenly spaced apart. They don't tend to be stacked on top of each other.
- **Clustered:** Points are grouped together in specific areas with respect to the study area. Like a group of points in the bottom left and the center but not many points anywhere else. 
- **CSR:** Points are uniformly distributed across the entire space. You may see little clusters or regularity here or there due to random variance but overall there isn't a noticable pattern.

# Problem 5

Draw pictures depicting a realization of a regular, clustered, and homogeneous (CSR) Poisson point process?

![](../../images/point-process-examples.png)

# Problem 6

Run the following command in R to simulate a homogeneous Poisson point process with intensity `lambda = 50` over the domain $[0, 1]\times[0,1]$. 

```{r, message=FALSE}
library(spatstat)
set.seed(105)
h1 <- rpoispp(50)
```

Plot `h1` and comment on what you observe. How many points were generated? Do the event location seem to be compatible with CSR?

```{r}
print(h1)
plot(h1)
```

It's 40 points which is interesting. Checking the docs: 

> Note that lambda is the intensity, that is, the expected number of points per unit area. The total number of points in the simulated pattern will be random with expected value mu = lambda * a where a is the area of the window win.

We only provide `lambda` here. So since we have an area of 1, the expected number of points is $\lambda$. However, since it's random, it will rarely be exactly that value. 

As for CSR compatability, it seems fine at a glance. Some points are close together, others further apart. There are some areas without points but there isn't any obvious clustering going on. 

# Problem 7

Let's create our own function to simulate data that are compatible with complete spatial randomness over a $[0, 1]\times[0,1]$ study area.

Create a function named `rcsr` that takes the parameter `lambda`.

The function should do three things:

1. Simulate `N`, the number of event locations, from a Poisson distribution with mean equal to `lambda`.
2. For the selected value of `N`, draw `N` events uniformly over the domain $[0, 1]\times[0,1]$.
    a. Draw the x-coordinate uniformly between [0, 1].
    b. Draw the y-coordinate uniformly between [0, 1].
3. Convert the `N` event locations to a `ppp` object.
4. Return the `ppp` object.

Run the function one time using $lambda = 50$ and plot the results.

```{r}
#| code-fold: true
#| code-summary: The code
#| 

set.seed(100)
rcsr <- function(lambda = 1) {
    N <- rpois(1, lambda)
    obs <- matrix(runif(2*N, min=0, max=1), ncol=2)
    return(spatstat.geom::ppp(obs[,1], obs[,2]))
}

ppp_object <- rcsr(lambda=50)
plot(ppp_object)
```


# Problem 8

Let's perform a Monte Carlo test to assess if our function from the previous problem works correctly (with respect to one characteristic).

1. Draw a single data set from the `rpoispp` function assuming `lambda = 50`. Use the `density` function to estimate the intensity function of the simulated data set. Compute the difference between the maximum and minimum estimated intensity values. Note: the `density` function method for `ppp` return in `im` object. The estimated intensity values for the `im` object are stored in the `v` element of `im` object. E.g., if the `x` is the output of the `density` function, then the estimated intensity values can be accessed via `x$v`.
2. Draw a simulated data set from the `rcsr` function assuming `lambda = 50`. Use the `density` function to estimate the intensity function of the simulated data set, and compute the difference between the maximum and minimum estimated intensity value.
3. Repeat the previous step 999 times.
4. Compute the Monte Carlo p-value for the test statistic from 1 with the test statistics from 3.

Does the `rcsr` function seem to produce realizations of a point process compatible with CSR with respect to this characteristic? Explain why?

```{r}
#| code-fold: true
#| code-summary: The code

library(pbapply)

set.seed(500)

# 1. 
ppp_object_1 <- spatstat.random::rpoispp(lambda=50)
obs_intensity_1 <- density(ppp_object_1)$v
t_obs <- max(obs_intensity_1) - min(obs_intensity_1)

# 2 and 3.
sims <- 1000
t_sim <- numeric(sims)
progressbar <- txtProgressBar(min=0, max=sims, style=3)

t_sim <- pbapply::pbsapply(1:sims, function(i) {
  sim <- rcsr(lambda = 50)
  i_sim <- density(sim)$v
  max(i_sim) - min(i_sim)
})

# Compute p-value
p_value <- (sum(t_sim >= t_obs) + 1) / (sims + 1)
cat("Monte Carlo P-Value:", p_value)
```

```{r}
#| code-fold: true
#| code-summary: Make a plot for my own sake

plot(density(t_sim), 
     main = "Monte Carlo Test Statistic Distribution",
     xlab = "Max - Min Intensity")
abline(v = t_obs, col = "red", lty = 2, lwd = 2)
```

It seems there is not significant evidence to indicate that the results given by the `rcsr` function I wrote are incompatible with CSR. This test I believe assess the homogeneity of CSR. All areas should be equally likely to have events, so the intensity across a simulated dataset shouldn't have too crazy of a range. That's why the test statistics check the range of the intensity. Overly large ranges would indicate deviations from that homogeneity. What we see here is that the observed test statistic from a `rpoispp`, that we know works, falls right in the middle of our simulated density. So we're probably in the clear.

# Problem 9

The **spatstat** package includes a data set named `japanesepines`.  The data give the locations of Japanese black pine saplings in a square sampling region in a natural forest. The observations were originally collected by Numata (1961).  

a) Plot the data.  Comment on what you see and whether this looks compatible with CSR.
b) Estimate and create a contour plot of the intensity function (use Scottâ€™s rule for the bandwidth in each direction).  Do the observed data appear to be compatible with CSR?

## A

```{r}
mydata <- spatstat.data::japanesepines
plot(mydata)
```

It looks fair enough for CSR. I see too much grouping to indicate regularity, but not enough of it to point towards clustering.

## B

```{r}
bandwidth <- spatstat.explore::bw.scott(mydata)
intensity_est <- smacpod::spdensity(mydata, sigma = bandwidth)
contour(intensity_est)
```

It's hard to say completely. However, I do notice two distinct valleys in this plot. Both are at 0.6. Everything above and below that point on the plot has a higher intensity, and this makes sense given the plot of the data itself. It's like there's this weird band with nothing in it. However, that is still possible with CSR data so it doesn't appear entirely *inconsistent* with CSR. Though it is definitely indicating a possible deviation.