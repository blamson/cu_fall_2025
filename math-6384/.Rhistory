if (i %% 100 == 0) {
print(cat("Iteration", i, "out of", nsim))
}
# organize the simulation as a dataframe so it plays nice w/ W() function
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
marks = ifelse(Delta[, i] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
tqsim <- t(Delta[, i]) %*% wsim %*% Delta[, i]
tsimvec[i] <- tqsim
}
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
tsimvec <- c()
for (i in 1:nsim) {
if (i %% 100 == 0) {
cat("Iteration", i, "out of", nsim, "\n")
}
# organize the simulation as a dataframe so it plays nice w/ W() function
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
marks = ifelse(Delta[, i] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
tqsim <- t(Delta[, i]) %*% wsim %*% Delta[, i]
tsimvec[i] <- tqsim
}
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
cat("Mean:", avg, "\nVariance:", sigmasq)
plot(density(tsimvec))
abline(v=Tq[1,1], col="red")
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
cat("Simulation Mean:", avg, "\nSimulation Variance:", sigmasq)
plot(density(tsimvec))
abline(v=Tq[1,1], col="red")
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
cat("Simulation Tq Mean:", avg, "\nSimulation Tq Variance:", sigmasq)
plot(density(tsimvec))
abline(v=Tq[1,1], col="red")
p <- mean(tsimvec >= Tq)
tsimvec
p <- mean(tsimvec >= Tq[1,1])
# p = rowMeans(Tq >= Tq[, nsim + 1])
p
qnn.test(trees_BUT_DIFFERENT, q = c(3, 5), case = "adult")
qnn.test(trees_BUT_DIFFERENT, q = c(3, 5), case = "adult")
qnn.test(trees_BUT_DIFFERENT, q = c(3, 5), case = "adult")
qnn.test(trees_BUT_DIFFERENT, q = c(3, 5), case = "adult")
p <- mean(tsimvec >= Tq[1,1])
cat("Monte Carlo p-value:", p)
p <- mean(tsimvec >= Tq[1,1])
cat("Monte Carlo p-value:", round(p, 3) )
p <- mean(tsimvec >= Tq[1,1])
cat("Monte Carlo p-value:", p)
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
p <- mean(tsimvec >= Tq[1,1])
cat()
cat("Simulation Tq Mean:", avg, "\nSimulation Tq Variance:", sigmasq, "\nMonte Carlo p-value:", p)
plot(density(tsimvec))
abline(v=Tq[1,1], col="red")
packages <- c("spatstat", "pbapply", "smacpod")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg, repos = "https://cran.rstudio.com/")
library(pkg, character.only = TRUE)
}
}
# options(scipen=9999)
load("scotlip_sf.rda")
scotlip_sf
scotlip_sf %>% str()
str(scotlip_sf)
#| include: false
library(smerc)
library(sf)
coords <- st_coordinates(st_centroid(st_geometry(scotlip_sf)))
# install.packages("spdep", "sf", "smerc", "RColorBrewer")
library(spdep)
library(sf)
library(smerc)
# read shapefile for new york counties
ny8 <- sf::st_read("./data/NY_data/NY8_utm18.shp")
# plot(ny8["Cases"], pal = hcl.colors)
plot(scotlip_sf$cancer, pal = hcl.colors)
scotlip_sf$cancer
coords
# plot region boundaries from ny8
plot(st_geometry(ny8), border="grey60")
plot(st_geometry(scotlip_sf))
plot(st_geometry(scotlip_sf), coords=coords)
plot(coords)
load("scotlip_sf.rda")
#| include: false
library(smerc)
library(sf)
coords <- st_coordinates(st_centroid(st_geometry(scotlip_sf)))
plot(scotlip_sf)
scotlip_sf$cancer
scotlip_sf
plot(scotlip_sf$cancer, scotlip_sf$geometry)
plot(scotlip_sf)
str(scotlip_sf)
cancer <- scotlip_sf[["cancer", "geometry"]]
cancer
cancer <- scotlip_sf[, ["cancer"]]
cancer <- scotlip_sf[, c("cancer", "geometry")]
plot(scotlip_sf)
cancer <- scotlip_sf[, c("cancer", "geometry")]
plot(cancer)
map_subset <- scotlip_sf[, c("expected", "cancer", "geometry")]
plot(cancer)
map_subset <- scotlip_sf[, c("expected", "cancer", "geometry")]
plot(map_subset)
map_subset <- scotlip_sf[, c("expected", "cancer", "geometry")]
plot(map_subset, pal = hcl.colors)
cancer <- scotlip_sf[, c("cancer", "geometry")]
plot(cancer, pal = hcl.colors)
cancer <- scotlip_sf[, c("cancer", "geometry")]
plot(cancer, pal = hcl.colors)
expected <- scotlip_sf[, c("expected", "geometry")]
plot(expected, pal = hcl.colors)
namessss <- scotlip_sf[, c("name", "geometry")]
plot(namessss)
scotlip_sf[scotlip_sf$cancer > 30,]
scotlip_sf[scotlip_sf$cancer > 20,]
scotlip_sf[scotlip_sf$cancer > 20,]
scotlip_sf[scotlip_sf$cancer >= 20,]
cancer[cancer$cancer >= 20,]
plot(cancer[cancer$cancer >= 20,])
cancer[cancer$cancer >= 20,]
scotlip_sf
cepp150k = cepp.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
nstar = 150000,
alpha = 0.10)
summary(cepp150k)
cepp150k = cepp.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
nstar = 150000,
alpha = 0.10)
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(cepp150k))
legend("topright", legend = c("n* = 150k"))
# basic plot
plot(cepp150k)
# basic info
cepp150k
# cluster info
summary(cepp150k)
clusters(cepp150k)
#| code-fold: true
#| code-summary: The code
cepp750k = cepp.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
nstar = 750000,
alpha = 0.10)
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(cepp750k))
legend("topright", legend = c("n* = 750k"))
# basic plot
plot(cepp750k)
# basic info
cepp750k
# cluster info
summary(cepp750k)
clusters(cepp750k)
#| code-fold: true
#| code-summary: The code
cepp1500k = cepp.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
nstar = 1500000,
alpha = 0.10)
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(cepp1500k))
legend("topright", legend = c("n* = 1500k"))
# basic plot
plot(cepp1500k)
# basic info
cepp1500k
# cluster info
summary(cepp1500k)
clusters(cepp1500k)
packages <- c("spatstat", "pbapply", "smacpod")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg, repos = "https://cran.rstudio.com/")
library(pkg, character.only = TRUE)
}
}
# options(scipen=9999)
load("scotlip_sf.rda")
#| include: false
library(smerc)
library(sf)
coords <- st_coordinates(st_centroid(st_geometry(scotlip_sf)))
cancer <- scotlip_sf[, c("cancer", "geometry")]
plot(cancer, pal = hcl.colors)
expected <- scotlip_sf[, c("expected", "geometry")]
plot(expected, pal = hcl.colors)
#| code-fold: true
#| code-summary: The code
cepp150k = cepp.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
nstar = 150000,
alpha = 0.10)
# basic info
cepp150k
# cluster info
summary(cepp150k)
clusters(cepp150k)
#| code-fold: true
#| code-summary: The code
cepp750k = cepp.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
nstar = 750000,
alpha = 0.10)
# basic info
cepp750k
# cluster info
summary(cepp750k)
clusters(cepp750k)
#| code-fold: true
#| code-summary: The code
cepp1500k = cepp.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
nstar = 1500000,
alpha = 0.10)
# basic info
cepp1500k
# cluster info
summary(cepp1500k)
clusters(cepp1500k)
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(cepp150k))
legend("topright", legend = c("n* = 150k"))
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(cepp750k))
legend("topright", legend = c("n* = 750k"))
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(cepp1500k))
legend("topright", legend = c("n* = 1500k"))
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(cepp150k))
legend("topright", legend = c("n* = 150k"))
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(cepp750k))
legend("topright", legend = c("n* = 750k"))
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(cepp1500k))
legend("topright", legend = c("n* = 1500k"))
packages <- c("spatstat", "pbapply", "smacpod")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg, repos = "https://cran.rstudio.com/")
library(pkg, character.only = TRUE)
}
}
# options(scipen=9999)
load("scotlip_sf.rda")
#| include: false
library(smerc)
library(sf)
coords <- st_coordinates(st_centroid(st_geometry(scotlip_sf)))
cancer <- scotlip_sf[, c("cancer", "geometry")]
plot(cancer, pal = hcl.colors)
expected <- scotlip_sf[, c("expected", "geometry")]
plot(expected, pal = hcl.colors)
#| code-fold: true
#| code-summary: The code
cepp150k = cepp.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
nstar = 150000,
alpha = 0.01)
# basic info
cepp150k
# cluster info
summary(cepp150k)
clusters(cepp150k)
#| code-fold: true
#| code-summary: The code
cepp750k = cepp.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
nstar = 750000,
alpha = 0.01)
# basic info
cepp750k
# cluster info
summary(cepp750k)
clusters(cepp750k)
#| code-fold: true
#| code-summary: The code
cepp1500k = cepp.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
nstar = 1500000,
alpha = 0.01)
# basic info
cepp1500k
# cluster info
summary(cepp1500k)
clusters(cepp1500k)
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(cepp150k))
legend("topright", legend = c("n* = 150k"))
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(cepp750k))
legend("topright", legend = c("n* = 750k"))
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(cepp1500k))
legend("topright", legend = c("n* = 1500k"))
bn6 = bn.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
cstar = 6,
alpha = 0.01)
bn6 # simple info
summary(bn6) # cluster info
clusters(bn6)
bn27 = bn.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
cstar = 27,
alpha = 0.01)
bn6 # simple info
summary(bn27) # cluster info
clusters(bn27)
bn54 = bn.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
cstar = 54,
alpha = 0.01)
bn6 # simple info
summary(bn54) # cluster info
clusters(bn54)
#| code-fold: true
#| code-summary: The code
bn54 = bn.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
cstar = 54,
alpha = 0.01)
bn54 # simple info
summary(bn54) # cluster info
clusters(bn54)
#| code-fold: true
#| code-summary: The code
bn27 = bn.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
cstar = 27,
alpha = 0.01)
bn27 # simple info
summary(bn27) # cluster info
clusters(bn27)
library(RColorBrewer)
display.brewer.all(type = "qual", colorblindFriendly = TRUE)
mycol = brewer.pal(4, "Dark2")
nycol = rep("white", nrow(scotlip_sf))
nycol[bn6$clusters[[1]]$locids] = mycol[1]
nycol[bn27$clusters[[1]]$locids] = mycol[4]
nycol[bn54$clusters[[1]]$locids] = mycol[3]
# plot most likely clusters
plot(st_geometry(scotlip_sf), border="grey60", axes = TRUE, col = nycol)
legend("topright",
legend = c("Cluster k = 6, 17", "Cluster k = 12",
"Cluster k = 17", "Cluster k = 23"),
lwd = 10, col = mycol)
library(RColorBrewer)
display.brewer.all(type = "qual", colorblindFriendly = TRUE)
mycol = brewer.pal(4, "Dark2")
nycol = rep("white", nrow(scotlip_sf))
nycol[bn6$clusters[[1]]$locids] = mycol[1]
nycol[bn27$clusters[[1]]$locids] = mycol[4]
nycol[bn54$clusters[[1]]$locids] = mycol[3]
# plot most likely clusters
plot(st_geometry(scotlip_sf), border="grey60", axes = TRUE, col = nycol)
# legend("topright",
#        legend = c("Cluster k = 6, 17", "Cluster k = 12",
#                   "Cluster k = 17", "Cluster k = 23"),
#        lwd = 10, col = mycol)
scotcol
library(RColorBrewer)
display.brewer.all(type = "qual", colorblindFriendly = TRUE)
mycol = brewer.pal(4, "Dark2")
scotcol = rep("white", nrow(scotlip_sf))
scotcol[bn6$clusters[[1]]$locids] = mycol[1]
scotcol[bn27$clusters[[1]]$locids] = mycol[4]
scotcol[bn54$clusters[[1]]$locids] = mycol[3]
# plot most likely clusters
plot(st_geometry(scotlip_sf), border="grey60", axes = TRUE, col = scotcol)
# legend("topright",
#        legend = c("Cluster k = 6, 17", "Cluster k = 12",
#                   "Cluster k = 17", "Cluster k = 23"),
#        lwd = 10, col = mycol)
scotcol
library(RColorBrewer)
display.brewer.all(type = "qual", colorblindFriendly = TRUE)
mycol = brewer.pal(4, "Dark2")
scotcol = rep("white", nrow(scotlip_sf))
scotcol[bn6$clusters[[1]]$locids] = mycol[1]
scotcol[bn27$clusters[[1]]$locids] = mycol[4]
scotcol[bn54$clusters[[1]]$locids] = mycol[3]
# plot most likely clusters
plot(st_geometry(scotlip_sf), border="grey60", axes = TRUE, col = scotcol)
legend("topright",
legend = c("Cluster c^* = 6", "Cluster c^* = 27",
"Cluster c^* = 54"),
lwd = 10, col = mycol)
library(RColorBrewer)
display.brewer.all(type = "qual", colorblindFriendly = TRUE)
mycol = brewer.pal(4, "Dark2")
scotcol = rep("white", nrow(scotlip_sf))
scotcol[bn6$clusters[[1]]$locids] = mycol[1]
scotcol[bn27$clusters[[1]]$locids] = mycol[4]
scotcol[bn54$clusters[[1]]$locids] = mycol[3]
# plot most likely clusters
plot(st_geometry(scotlip_sf), border="grey60", axes = TRUE, col = scotcol)
legend("topright",
legend = c("Cluster c^* = 6", "Cluster c^* = 27",
"Cluster c^* = 54"),
lwd = 10, col = scotcol)
library(RColorBrewer)
display.brewer.all(type = "qual", colorblindFriendly = TRUE)
mycol = brewer.pal(4, "Dark2")
scotcol = rep("white", nrow(scotlip_sf))
scotcol[bn6$clusters[[1]]$locids] = mycol[1]
scotcol[bn27$clusters[[1]]$locids] = mycol[2]
scotcol[bn54$clusters[[1]]$locids] = mycol[3]
# plot most likely clusters
plot(st_geometry(scotlip_sf), border="grey60", axes = TRUE, col = scotcol)
legend("topright",
legend = c("Cluster c^* = 6", "Cluster c^* = 27",
"Cluster c^* = 54"),
lwd = 10, col = mycol)
packages <- c("spatstat", "pbapply", "smacpod", "RColorBrewer")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg, repos = "https://cran.rstudio.com/")
library(pkg, character.only = TRUE)
}
}
# options(scipen=9999)
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(bn6))
legend("topright", legend = c("c* = 6"))
#| code-fold: true
#| code-summary: Plots on different maps
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(bn6))
legend("topright", legend = c("c* = 6"))
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(bn27))
legend("topright", legend = c("c* = 27"))
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(bn54))
legend("topright", legend = c("c* = 54"))
bn54$clusters
scan = scan.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
ex = scotlip_sf$expected,
nsim = 999,
alpha  = 0.1)
scan
spsca.test
spscan.test
scan = scan.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
ex = scotlip_sf$expected,
ubpo=0.1
)
scan = scan.test(coords = coords,
cases = scotlip_sf$cancer,
pop = scotlip_sf$population,
ex = scotlip_sf$expected,
ubpo=0.1
)
summary(scan)
plot(sf::st_geometry(scotlip_sf), border = "grey60", axes = TRUE,
col = color.clusters(scan))
