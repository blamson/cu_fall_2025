rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim + 1)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
delta = Delta[, 1],
marks = ifelse(Delta[, 1] == 1, "adult", "juvenile")
)
sim_df
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim + 1)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
delta = Delta[, 1],
marks = ifelse(Delta[, 1] == 1, "adult", "juvenile")
)
W(sim_df, casename = "adult")
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
delta = Delta[, 1],
marks = ifelse(Delta[, 1] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n
)
W(sim_df, casename = "adult")
trees_BUT_DIFFERENT$n
sim_df
rcases[1, ]
sim_df[359, ]
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
delta = Delta[, 1],
marks = ifelse(Delta[, 1] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
Tq <- t(Delta[, 1]) %*% wsim %*% Delta[, 1]
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
delta = Delta[, 1],
marks = ifelse(Delta[, 1] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
Tq <- t(Delta[, 1]) %*% wsim %*% Delta[, 1]
print(Tq)
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
tsimvec <- vector(0, length=nsim)
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
tsimvec <- matrix(0, nrow = 1, ncol=nsim)
for (i in nsim) {
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
delta = Delta[, i],
marks = ifelse(Delta[, i] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
Tq <- t(Delta[, i]) %*% wsim %*% Delta[, i]
tsimvec[i] <- Tq
}
tsimvec
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
tsimvec <- matrix(0, nrow = 1, ncol=nsim)
for (i in nsim) {
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
delta = Delta[, i],
marks = ifelse(Delta[, i] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
Tq <- t(Delta[, i]) %*% wsim %*% Delta[, i]
print(Tq)
tsimvec[i] <- Tq
}
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
tsimvec <- matrix(0, nrow = 1, ncol=nsim)
for (i in 1:nsim) {
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
delta = Delta[, i],
marks = ifelse(Delta[, i] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
Tq <- t(Delta[, i]) %*% wsim %*% Delta[, i]
tsimvec[i] <- Tq
}
tsimvec
plot(tsimvec)
plot(tsimvec[1,])
x <- c()
x[1] <- 2
x
x[500] <- 2
x
10 %/% 2
10 %/% 10
10 %% 10
10 %% 5
1 %% 5
1 %% 4
100 %% 100
200 %% 100
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
tsimvec <- c()
for (i in 1:nsim) {
if (i %% 100 == 0) {
print(i)
}
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
delta = Delta[, i],
marks = ifelse(Delta[, i] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
Tq <- t(Delta[, i]) %*% wsim %*% Delta[, i]
tsimvec[i] <- Tq
}
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
tsimvec <- c()
for (i in 1:nsim) {
if (i %% 100 == 0) {
print(i)
}
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
delta = Delta[, i],
marks = ifelse(Delta[, i] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
# Tq <- t(Delta[, i]) %*% wsim %*% Delta[, i]
Tq <- rowSums(crossprod(Delta[, i], wsim) * t(Delta[, i]))
tsimvec[i] <- Tq
}
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
print(avg, sigmasq)
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
print(c(avg, sigmasq))
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
cat("Mean: ", avg, " Variance: ", sigmasq)
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
cat("Mean:", avg, "Variance:", sigmasq)
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
cat("Mean:", avg, "\nVariance:", sigmasq)
summary(tsimvec)
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
cat("Mean:", avg, "\nVariance:", sigmasq)
plot(density(tsimvec))
W <- function(x, q=3, casename) {
# We'd normally do value checks here but let's assume our user is not malicious
# Identify cases
idxcase = which(x$marks == casename)
# Basic variable stuff ---
N = x$n
N1 = length(idxcase)
# Return symmetric 884x884 matrix of distances
D <- smerc::gedist(cbind(x$x, x$y))
diag(D) <- Inf # This is set so that the self cannot be a nearest neighbor
# This guy is our key basically. It allows us to identify the nearest neighbors of a given tree
# odistq is a Nxq matrix where the row is a tree and the q columns are its q nearest neighbors
odistq = t(apply(D, 1, order)[1:q, ])
Wq = matrix(0, nrow = N, ncol = N)
for (j in 1:N) {
nn = odistq[j, 1:q] # Identify the q nearest neighbors of a given tree
Wq[j, nn] = 1       # Go to the row for that tree, and assign those nn indices to 1
}
return(Wq)
}
Wq <- W(x=trees_BUT_DIFFERENT, q=3, casename = "adult")
# Each row should have 3 nearest neighbors identified...
sum(Wq[500,])
delta <- as.integer(trees_BUT_DIFFERENT$marks == "adult")
Tq <- t(delta) %*% Wq %*% delta
cat("Tq: ", Tq[1,1])
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
tsimvec <- c()
for (i in 1:nsim) {
if (i %% 100 == 0) {
print(i)
}
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
delta = Delta[, i],
marks = ifelse(Delta[, i] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
tqsim <- t(Delta[, i]) %*% wsim %*% Delta[, i]
tsimvec[i] <- tqsim
}
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
cat("Mean:", avg, "\nVariance:", sigmasq)
plot(density(tsimvec))
abline(v=Tq[1,1], color="red")
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
cat("Mean:", avg, "\nVariance:", sigmasq)
plot(density(tsimvec))
abline(v=Tq[1,1], col="red")
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
tsimvec <- c()
for (i in 1:nsim) {
if (i %% 100 == 0) {
cat("Iteration", i)
}
# organize the simulation as a dataframe so it plays nice w/ W() function
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
marks = ifelse(Delta[, i] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
tqsim <- t(Delta[, i]) %*% wsim %*% Delta[, i]
tsimvec[i] <- tqsim
}
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
tsimvec <- c()
for (i in 1:nsim) {
if (i %% 100 == 0) {
print(cat("Iteration", i, "out of", nsim))
}
# organize the simulation as a dataframe so it plays nice w/ W() function
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
marks = ifelse(Delta[, i] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
tqsim <- t(Delta[, i]) %*% wsim %*% Delta[, i]
tsimvec[i] <- tqsim
}
set.seed(500)
# Re assign some variables that are in the function from A
nsim <- 499
q <- 3
N1 <- length(idxcase)
# Create (nsim x case_count) 0 matrix
rcases = matrix(0, ncol = N1, nrow = nsim)
# Randomly assign the cases to 1 of the N observations
# Each row represents a simulation and each column an index randomly labeled as a case
for (i in 1:nsim) rcases[i, ] = sample(1:N, N1)
# Uses the random labeling from rcases and creates a n X nsim matrix
# of 0s and 1s. Each column is a simulation and the rows identify which trees
# for that simulation are adults and which are juveniles
Delta = matrix(0, nrow = N, ncol = nsim)
for (i in 1:nsim) Delta[rcases[i, ], i] <- 1
tsimvec <- c()
for (i in 1:nsim) {
if (i %% 100 == 0) {
cat("Iteration", i, "out of", nsim, "\n")
}
# organize the simulation as a dataframe so it plays nice w/ W() function
sim_df <- data.frame(
x = trees_BUT_DIFFERENT$x,
y = trees_BUT_DIFFERENT$y,
marks = ifelse(Delta[, i] == 1, "adult", "juvenile"),
n = trees_BUT_DIFFERENT$n # Bit hacky but it works!
)
wsim <- W(sim_df, casename = "adult")
tqsim <- t(Delta[, i]) %*% wsim %*% Delta[, i]
tsimvec[i] <- tqsim
}
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
cat("Mean:", avg, "\nVariance:", sigmasq)
plot(density(tsimvec))
abline(v=Tq[1,1], col="red")
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
cat("Simulation Mean:", avg, "\nSimulation Variance:", sigmasq)
plot(density(tsimvec))
abline(v=Tq[1,1], col="red")
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
cat("Simulation Tq Mean:", avg, "\nSimulation Tq Variance:", sigmasq)
plot(density(tsimvec))
abline(v=Tq[1,1], col="red")
p <- mean(tsimvec >= Tq)
tsimvec
p <- mean(tsimvec >= Tq[1,1])
# p = rowMeans(Tq >= Tq[, nsim + 1])
p
qnn.test(trees_BUT_DIFFERENT, q = c(3, 5), case = "adult")
qnn.test(trees_BUT_DIFFERENT, q = c(3, 5), case = "adult")
qnn.test(trees_BUT_DIFFERENT, q = c(3, 5), case = "adult")
qnn.test(trees_BUT_DIFFERENT, q = c(3, 5), case = "adult")
p <- mean(tsimvec >= Tq[1,1])
cat("Monte Carlo p-value:", p)
p <- mean(tsimvec >= Tq[1,1])
cat("Monte Carlo p-value:", round(p, 3) )
p <- mean(tsimvec >= Tq[1,1])
cat("Monte Carlo p-value:", p)
avg <- mean(tsimvec)
sigmasq <- var(tsimvec)
p <- mean(tsimvec >= Tq[1,1])
cat()
cat("Simulation Tq Mean:", avg, "\nSimulation Tq Variance:", sigmasq, "\nMonte Carlo p-value:", p)
plot(density(tsimvec))
abline(v=Tq[1,1], col="red")
