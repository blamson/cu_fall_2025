points(birch_pp, pch = 20, col = "brown")
par(mfrow = c(1, 1))
# Load the data explicitly
data("urkiola", package = "spatstat.data")
# Split into species-specific point patterns
species_pp <- spatstat.geom::split.ppp(urkiola)
oak_pp   <- species_pp$oak
birch_pp <- species_pp$birch
# Estimate densities with given bandwidths
oak_density   <- spatstat.explore::density.ppp(oak_pp, sigma = 14.5)
birch_density <- spatstat.explore::density.ppp(birch_pp, sigma = 15)
# Plot contour side by side
par(mfrow = c(1, 2))
contour(oak_density, main = "Oak intensity (σ = 14.5)")
# points(oak_pp, pch = 20, col = "darkgreen")
contour(birch_density, main = "Birch intensity (σ = 15)")
# points(birch_pp, pch = 20, col = "brown")
par(mfrow = c(1, 1))
trees
head(trees)
str(trees)
trees$marks
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
birch_density
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
contour(birch_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
contour(birch_density)
contour(oak_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
contour(birch_density)
contour(oak_density)
par(mfrow = c(1,1))
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
par(mfrow = c(1,1))
contour(birch_density)
contour(oak_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
par(mfrow = c(1,2))
contour(birch_density)
contour(oak_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
par(mfrow = c(1,2))
filled.contour(birch_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
par(mfrow = c(1,2))
contour(birch_density)
contour(oak_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
par(mfrow = c(2,1))
contour(birch_density)
contour(oak_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
par(mfrow = c(1,2))
contour(birch_density)
contour(oak_density)
window(trees)
oak_density$yrange
oak_density$xrange
range(oak_density$xcol)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
par(mfrow = c(1,2))
contour(birch_density, xlim = birch_density$xrange)
contour(oak_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
par(mfrow = c(1,2))
contour(birch_density, xlim = birch_density$xrange, ylim = birch_density$yrange)
contour(oak_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
dev.new(width=5, height=4)
par(mfrow = c(1,2))
contour(birch_density)
contour(oak_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
dev.new(width=5, height=100)
par(mfrow = c(1,2))
contour(birch_density)
contour(oak_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
dev.new(width=5, height=100)
par(mfrow = c(1,2))
contour(birch_density)
contour(oak_density)
1
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
dev.new(width=10, height=10)
par(mfrow = c(1,2))
contour(birch_density)
contour(oak_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
packages <- c("spatstat", "pbapply", "smacpod")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg, repos = "https://cran.rstudio.com/")
library(pkg, character.only = TRUE)
}
}
trees <- spatstat.data::urkiola
plot(
trees,
cols = c("blue", "darkgreen"),
pch=c(1,3),
cex=0.7
)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
contour(birch_density)
contour(oak_density)
10^(-5)
10^(-4)
10^(-3)
0.00001
packages <- c("spatstat", "pbapply", "smacpod")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg, repos = "https://cran.rstudio.com/")
library(pkg, character.only = TRUE)
}
}
options(scipen=9999)
trees <- spatstat.data::urkiola
plot(
trees,
cols = c("blue", "darkgreen"),
pch=c(1,3),
cex=0.7
)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
contour(birch_density)
contour(oak_density)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
contour(birch_density)
title("Birch Trees: Bandwidth = 15")
contour(oak_density)
title("Oak Trees: Bandwidth = 14.5")
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
contour(birch_density, main="")
title("Birch Trees: Bandwidth = 15")
contour(oak_density, main="")
title("Oak Trees: Bandwidth = 14.5")
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
contour(birch_density, main="Birch Trees: Bandwidth = 15")
# title("Birch Trees: Bandwidth = 15")
contour(oak_density, main="")
title("Oak Trees: Bandwidth = 14.5")
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
contour(birch_density, main="Birch Trees: Bandwidth = 15")
contour(oak_density, main="Oak Trees: Bandwidth = 14.5")
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
contour(birch_density, main="Birch Trees: Bandwidth = 15")
contour(oak_density, main="Oak Trees: Bandwidth = 14.5")
rtrees <- smacpod::logrr(trees, case="oak", sigma=16)
contour(rtrees)
if (!file.exists("trees-point-envelopes.rda")) {
tree_envelopes = logrr(trees, sigma = 16, case = "oak",
nsim = 499, level = 0.95)
save(tree_envelopes, file = "trees-point-envelopes.rda")
}
load("trees-point-envelopes.rda")
grad = gradient.color.scale(
min(tree_envelopes$v, na.rm = TRUE),
max(tree_envelopes$v, na.rm = TRUE)
)
plot(tree_envelopes, col = grad$col, breaks = grad$breaks)
smacpod::logrr.test(tree_envelopes)
kdest(trees, case="oak")
ktree <- kdest(trees, case="oak")
plot(ktree, cbind(iso, theo) ~ r, legend=false, main="")
ktree <- kdest(trees, case="oak")
plot(ktree, cbind(iso, theo) ~ r, legend=FALSE, main="")
if (!file.exists("kdenv.rda")) {
kdenv = kdest(trees, case = "oak", nsim = 499, level = 0.95)
save(kdenv, file = "kdenv.rda")
}
load("kdenv.rda")
if (!file.exists("kdenv.rda")) {
kdenv = kdest(trees, case = "oak", nsim = 499, level = 0.95)
save(kdenv, file = "kdenv.rda")
}
load("kdenv.rda")
if (!file.exists("kdenv.rda")) {
kdenv = kdest(trees, case = "oak", nsim = 499, level = 0.95)
save(kdenv, file = "kdenv.rda")
}
load("kdenv.rda")
plot(kdenv, ylab = "difference in K functions")
if (!file.exists("kdenv.rda")) {
kdenv = kdest(trees, case = "oak", nsim = 499, level = 0.95)
save(kdenv, file = "kdenv.rda")
}
load("kdenv.rda")
plot(kdenv, ylab = "difference in K functions", legend=T)
?kdest
if (!file.exists("kdenv.rda")) {
kdenv = kdest(trees, case = "oak", nsim = 499, level = 0.95)
save(kdenv, file = "kdenv.rda")
}
load("kdenv.rda")
plot(kdenv, ylab = "difference in K functions", legend=F)
# Manually add the legend
legend("topright",
legend = c("Observed difference",
"Simulated mean difference",
"Min/Max envelopes",
"95% pointwise tolerance envelopes"),
col = c("black", "blue", "red", "green"),
lty = c(1, 2, 1, 3),
lwd = c(2, 2, 1, 1),
cex = 0.8,    # makes text a bit smaller
bg = "white") # optional: white background for readability
if (!file.exists("kdenv.rda")) {
kdenv = kdest(trees, case = "oak", nsim = 499, level = 0.95)
save(kdenv, file = "kdenv.rda")
}
load("kdenv.rda")
plot(kdenv, ylab = "difference in K functions", legend=F)
# Manually add the legend
legend("topright",
legend = c("Observed difference",
"Simulated mean difference",
"Min/Max envelopes",
"95% pointwise tolerance envelopes"),
cex = 0.8,    # makes text a bit smaller
bg = "white") # optional: white background for readability
if (!file.exists("kdenv.rda")) {
kdenv = kdest(trees, case = "oak", nsim = 499, level = 0.95)
save(kdenv, file = "kdenv.rda")
}
load("kdenv.rda")
plot(kdenv, ylab = "difference in K functions", legend=T)
# Manually add the legend
# legend("topright",
#        legend = c("Observed difference",
#                   "Simulated mean difference",
#                   "Min/Max envelopes",
#                   "95% pointwise tolerance envelopes"),
#        cex = 0.8,    # makes text a bit smaller
#        bg = "white") # optional: white background for readability
if (!file.exists("kdenv.rda")) {
kdenv = kdest(trees, case = "oak", nsim = 499, level = 0.95)
save(kdenv, file = "kdenv.rda")
}
load("kdenv.rda")
plot(kdenv, ylab = "difference in K functions", legend=F)
legend("bottomright", legend = c("obs", "avg", "max/min env", "95% env"),
lty = c(1, 2, 1, 2), col = c("black", "red", "darkgrey", "lightgrey"),
lwd = c(1, 1, 10, 10))
if (!file.exists("kdenv.rda")) {
kdenv = kdest(trees, case = "oak", nsim = 499, level = 0.95)
save(kdenv, file = "kdenv.rda")
}
load("kdenv.rda")
plot(kdenv, ylab = "difference in K functions", legend=F)
legend("topleft", legend = c("obs", "avg", "max/min env", "95% env"),
lty = c(1, 2, 1, 2), col = c("black", "red", "darkgrey", "lightgrey"),
lwd = c(1, 1, 10, 10))
kdplus.test(kdenv)
spatstat.data::paracou
load(spatstat.data::paracou)
paracou <- spatstat.data::paracou
plot(
paracou,
cols = c("blue", "darkgreen"),
pch=c(1,3),
cex=0.7
)
adult <- which(paracou$marks == "adult")
adult_density <- spdensity(paracou[adult, ], sigma = 65)
juvenile_density <- spdensity(paracou[-adult, ], sigma = 40)
contour(adult_density, main="Adult Trees: Bandwidth = 65")
contour(juvenile_density, main="Juvenile Trees: Bandwidth = 40")
packages <- c("spatstat", "pbapply", "smacpod")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg, repos = "https://cran.rstudio.com/")
library(pkg, character.only = TRUE)
}
}
# options(scipen=9999)
trees <- spatstat.data::urkiola
plot(
trees,
cols = c("blue", "darkgreen"),
pch=c(1,3),
cex=0.7
)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
contour(birch_density, main="Birch Trees: Bandwidth = 15")
contour(oak_density, main="Oak Trees: Bandwidth = 14.5")
rtrees <- smacpod::logrr(trees, case="oak", sigma=16)
contour(rtrees)
if (!file.exists("trees-point-envelopes.rda")) {
tree_envelopes = logrr(trees, sigma = 16, case = "oak",
nsim = 499, level = 0.95)
save(tree_envelopes, file = "trees-point-envelopes.rda")
}
load("trees-point-envelopes.rda")
grad = gradient.color.scale(
min(tree_envelopes$v, na.rm = TRUE),
max(tree_envelopes$v, na.rm = TRUE)
)
plot(tree_envelopes, col = grad$col, breaks = grad$breaks)
smacpod::logrr.test(tree_envelopes)
if (!file.exists("kdenv.rda")) {
kdenv = kdest(trees, case = "oak", nsim = 499, level = 0.95)
save(kdenv, file = "kdenv.rda")
}
load("kdenv.rda")
plot(kdenv, ylab = "difference in K functions", legend=F)
legend("topleft", legend = c("obs", "avg", "max/min env", "95% env"),
lty = c(1, 2, 1, 2), col = c("black", "red", "darkgrey", "lightgrey"),
lwd = c(1, 1, 10, 10))
kdplus.test(kdenv)
paracou <- spatstat.data::paracou
plot(
paracou,
cols = c("blue", "darkgreen"),
pch=c(1,3),
cex=0.7
)
adult <- which(paracou$marks == "adult")
adult_density <- spdensity(paracou[adult, ], sigma = 65)
juvenile_density <- spdensity(paracou[-adult, ], sigma = 40)
contour(adult_density, main="Adult Trees: Bandwidth = 65")
contour(juvenile_density, main="Juvenile Trees: Bandwidth = 40")
packages <- c("spatstat", "pbapply", "smacpod")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg, repos = "https://cran.rstudio.com/")
library(pkg, character.only = TRUE)
}
}
# options(scipen=9999)
trees <- spatstat.data::urkiola
plot(
trees,
cols = c("blue", "darkgreen"),
pch=c(1,3),
cex=0.7
)
birch <- which(trees$marks == "birch")
birch_density <- spdensity(trees[birch, ], sigma = 15)
oak_density <- spdensity(trees[-birch, ], sigma = 14.5)
contour(birch_density, main="Birch Trees: Bandwidth = 15")
contour(oak_density, main="Oak Trees: Bandwidth = 14.5")
rtrees <- smacpod::logrr(trees, case="oak", sigma=16)
contour(rtrees)
if (!file.exists("trees-point-envelopes.rda")) {
tree_envelopes = logrr(trees, sigma = 16, case = "oak",
nsim = 499, level = 0.95)
save(tree_envelopes, file = "trees-point-envelopes.rda")
}
load("trees-point-envelopes.rda")
grad = gradient.color.scale(
min(tree_envelopes$v, na.rm = TRUE),
max(tree_envelopes$v, na.rm = TRUE)
)
plot(tree_envelopes, col = grad$col, breaks = grad$breaks)
smacpod::logrr.test(tree_envelopes)
if (!file.exists("kdenv.rda")) {
kdenv = kdest(trees, case = "oak", nsim = 499, level = 0.95)
save(kdenv, file = "kdenv.rda")
}
load("kdenv.rda")
plot(kdenv, ylab = "difference in K functions", legend=F)
legend("topleft", legend = c("obs", "avg", "max/min env", "95% env"),
lty = c(1, 2, 1, 2), col = c("black", "red", "darkgrey", "lightgrey"),
lwd = c(1, 1, 10, 10))
kdplus.test(kdenv)
paracou <- spatstat.data::paracou
plot(
paracou,
cols = c("blue", "darkgreen"),
pch=c(1,3),
cex=0.7
)
adult <- which(paracou$marks == "adult")
adult_density <- spdensity(paracou[adult, ], sigma = 65)
juvenile_density <- spdensity(paracou[-adult, ], sigma = 40)
contour(adult_density, main="Adult Trees: Bandwidth = 65")
contour(juvenile_density, main="Juvenile Trees: Bandwidth = 40")
rparanou <- smacpod::logrr(paracou, case="adult", sigma=52.5)
contour(rparacou)
rparacou <- smacpod::logrr(paracou, case="adult", sigma=52.5)
contour(rparacou)
tree_envelopes
if (!file.exists("paracou_envelopes.rda")) {
paracou_envelopes = logrr(paracou, sigma = 52.5, case = "adult",
nsim = 499, level = 0.95)
save(paracou_envelopes, file = "paracou_envelopes.rda")
}
load("paracou_envelopes.rda")
grad = gradient.color.scale(
min(paracou_envelopes$v, na.rm = TRUE),
max(paracou_envelopes$v, na.rm = TRUE)
)
plot(paracou_envelopes, col = grad$col, breaks = grad$breaks)
smacpod::logrr.test(paracou_envelopes)
if (!file.exists("kdenv_paracou.rda")) {
kdenv_paracou = kdest(paracou, case = "adult", nsim = 499, level = 0.95)
save(kdenv_paracou, file = "kdenv_paracou.rda")
}
load("kdenv_paracou.rda")
plot(kdenv_paracou, ylab = "difference in K functions", legend=F)
legend("topleft", legend = c("obs", "avg", "max/min env", "95% env"),
lty = c(1, 2, 1, 2), col = c("black", "red", "darkgrey", "lightgrey"),
lwd = c(1, 1, 10, 10))
kdplus.test(kdenv_paracou)
# load packages
library(smacpod)
# load grave data
data(grave)
# perform test using spatial scan statistic
# use group name to select case group
scan = spscan.test(grave, nsim = 999, case = "affected")
# summary of scan test results
summary(scan)
# plot scan test results
plot(scan, chars = c(1, 20),
main = "most likely cluster for grave data",
border = "orange")
# extract most likely and other significant clusters
clusters(scan)
# run a parallelized version of spscan.test
# setup workers for parallelization
# use 2 workers
cl <- parallel::makeCluster(getOption("cl.cores", 2))
# if there were more than 1 cluster ....
scan2 = spscan.test(grave, nsim = 999, case = "affected",
alpha = 0.8, cl = cl)
summary(scan2)
plot(scan2, chars = c(1, 20),
main = "detected clusters for grave data",
border = c("blue", "orange"), clwd = c(3, 2),
clty = c(2, 1))
clusters(scan2)
# q nearest neighbor test
# use position in levels(grave$marks) to select case group
qnn.test(grave,
q = c(3, 5, 7, 9, 11, 13, 15),
nsim = 499,
case = "affected")
packages <- c("spatstat", "pbapply", "smacpod")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg, repos = "https://cran.rstudio.com/")
library(pkg, character.only = TRUE)
}
}
# options(scipen=9999)
trees <- spatstat.data::urkiola
kdenv = kdest(trees, case = "oak", nsim = 499, level = 0.95)
packages <- c("spatstat", "pbapply", "smacpod")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg, repos = "https://cran.rstudio.com/")
library(pkg, character.only = TRUE)
}
}
# options(scipen=9999)
trees <- spatstat.data::urkiola
trees
pines <- spatstat.data::japanesepines
pines
