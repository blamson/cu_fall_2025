# ---------- indices & params ----------
set DAYS := 1..T;               # days 1..T (make sure param T is defined)

param T integer > 0;
param Demand{DAYS} >= 0;       # napkins required on day t
param InitStock >= 0;          # clean napkins on hand at end of day 0 (beginning for day1)
param napkin_price > 0;
param wash2_price  > 0;        # fast (2-day) laundry price per napkin
param wash4_price  > 0;        # slow (4-day) laundry price per napkin
param trash_cost >= 0 := 0;    # optional disposal cost (default 0)

# ---------- decision variables ----------
var Buy{t in DAYS} >= 0;       # clean napkins bought for day t (available same day)
var Carry{t in 0..T} >= 0;     # clean napkins at end of day t; include Carry[0] for init
var Wash2{t in DAYS} >= 0;     # used napkins sent to 2-day service after day t
var Wash4{t in DAYS} >= 0;     # used napkins sent to 4-day service after day t
var Trash{t in DAYS} >= 0;     # used napkins discarded after day t

# set initial inventory
s.t. InitCarry_def: Carry[0] = InitStock;

# ---------- inventory / flow balance ----------
# For each day t: beginning inventory + purchases + returns = demand + ending inventory
# Returns from fast laundry are Wash2[t-2] (if t-2 >= 1), returns from slow are Wash4[t-4] (if t-4 >=1)

s.t. InventoryBalance {t in DAYS}:
    Carry[t-1]
  + Buy[t]
  + (if t-2 >= 1 then Wash2[t-2] else 0)
  + (if t-4 >= 1 then Wash4[t-4] else 0)
  = Demand[t] + Carry[t];

# ---------- used-napkin routing: used napkins generated by day t must be sent somewhere ----------
s.t. UsedRouting {t in DAYS}:
    Wash2[t] + Wash4[t] + Trash[t] = Demand[t];

# ---------- objective ----------
minimize Total_Cost:
    sum {t in DAYS} ( napkin_price * Buy[t]
                    + wash2_price  * Wash2[t]
                    + wash4_price  * Wash4[t]
                    + trash_cost   * Trash[t] );

# ---------- bounds / integrality ----------
# If you want integer napkins:
# var Buy{t in DAYS} integer >= 0;
# var Carry{t in 0..T} integer >= 0;
# var Wash2{t in DAYS} integer >= 0;
# var Wash4{t in DAYS} integer >= 0;
# var Trash{t in DAYS} integer >= 0;
